from aiogram import Bot, types
from aiogram.dispatcher import FSMContext

from bot.states import RegisterSteps, UserState
from bot.airtable import AirtableAPI


async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup()
    start_button = types.KeyboardButton(text="–ü–æ–µ—Ö–∞–ª–∏!")
    keyboard.add(start_button)
    await message.answer(
        f"""–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}!

–° –ø–æ–º–æ—â—å—é MeetPeer —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –ª—é–¥—å–º–∏ –∏–∑ —Ç–≤–æ–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.

–í—Å–µ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ:
1) –†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –±–æ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –æ–¥–Ω–æ–≥–æ –≤—É–∑–∞
2) –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –≤—Å—Ç—Ä–µ—á—É –∏ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç–µ—Å—å –æ –∑–≤–æ–Ω–∫–µ –∏–ª–∏ –ª–∏—á–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ
3) –ó–Ω–∞–∫–æ–º–∏—Ç–µ—Å—å –∏ –æ–±–º–µ–Ω–∏–≤–∞–µ—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º!

–ù–∞—á–Ω–µ–º?
        """,
        reply_markup=keyboard,
    )
    await AirtableAPI.create_user(
        tg_id=message.from_user.id, username=message.from_user.username
    )
    await RegisterSteps.go.set()


async def cmd_text_go(message: types.Message, state: FSMContext):
    await AirtableAPI.update_user(message.from_user.id, state=UserState.go)
    await message.answer(
        "–°—É–ø–µ—Ä! –†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –≥–ª—É–ø–æ–≥–æ –º–æ–ª—á–∞–Ω–∏—è –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ.\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    await RegisterSteps.next()


async def stage_name(message: types.Message, state: FSMContext):
    await AirtableAPI.update_user(
        message.from_user.id, state=UserState.name, name=message.text
    )
    await message.reply(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {message.text}!")
    keyboard = types.ReplyKeyboardMarkup()
    buttons = [
        types.KeyboardButton(text="–°—Ç—É–¥–µ–Ω—Ç"),
        types.KeyboardButton(text="–í—ã–ø—É—Å–∫–Ω–∏–∫"),
    ]
    keyboard.add(*buttons)
    await message.answer("–¢—ã —Å—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫?", reply_markup=keyboard)
    await RegisterSteps.next()


async def stage_graduate(message: types.Message, state: FSMContext):
    if message.text == "–°—Ç—É–¥–µ–Ω—Ç":
        await AirtableAPI.update_user(
            message.from_user.id, state=UserState.is_graduate, is_graduate=False
        )
        await message.answer(
            "–ö—Ä—É—Ç–æ üòé\n\n–ì–¥–µ —Ç—ã —É—á–∏—à—å—Å—è? –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –∏–∑ —Ç–≤–æ–µ–≥–æ –≤—É–∑–∞.",
            reply_markup=types.ReplyKeyboardRemove(),
        )
    elif message.text == "–í—ã–ø—É—Å–∫–Ω–∏–∫":
        await AirtableAPI.update_user(
            message.from_user.id, state=UserState.is_graduate, is_graduate=True
        )
        await message.answer(
            "–ö—Ä—É—Ç–æ üòé\n\n–í—ã–ø—É—Å–∫–Ω–∏–∫–æ–º –∫–∞–∫–æ–≥–æ –≤—É–∑–∞ —Ç—ã —è–≤–ª—è–µ—à—å—Å—è? –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –∏–∑ —Ç–≤–æ–µ–≥–æ –≤—É–∑–∞.",
            reply_markup=types.ReplyKeyboardRemove(),
        )
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —è–≤–ª—è–µ—à—å—Å—è –ª–∏ —Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–º –∏–ª–∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–º."
        )
        return
    await RegisterSteps.next()


async def stage_university(message: types.Message, state: FSMContext):
    await AirtableAPI.update_user(
        message.from_user.id, state=UserState.university, university=message.text
    )
    user = await AirtableAPI.get_user(message.from_user.id)
    is_graduate = user["records"][0]["fields"].get("is_graduate")
    if is_graduate:
        await message.answer("–í –∫–∞–∫–æ–º –≥–æ–¥—É —Ç—ã –≤—ã–ø—É—Å—Ç–∏–ª—Å—è(-–∞—Å—å)?")
    else:
        await message.answer("–í –∫–∞–∫–æ–º –≥–æ–¥—É —Ç—ã –≤—ã–ø—É—Å–∫–∞–µ—à—å—Å—è?")
    await RegisterSteps.next()
