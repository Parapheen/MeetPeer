import asyncio
from datetime import datetime

from aiogram import Bot, types
from aiogram.dispatcher import FSMContext

from bot.states import RegisterSteps, UserState
from bot.airtable import AirtableAPI


async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup()
    start_button = types.KeyboardButton(text="–ü–æ–µ—Ö–∞–ª–∏!")
    keyboard.add(start_button)
    await message.answer(
        f"""–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}!

–° –ø–æ–º–æ—â—å—é MeetPeer —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –ª—é–¥—å–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Ç—Å—è –∏–ª–∏ —É—á–∏–ª–∏—Å—å –≤ —Ç–≤–æ–µ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ.

–í—Å–µ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ:
1) –†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –±–æ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –æ–¥–Ω–æ–≥–æ –≤—É–∑–∞
2) –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –≤—Å—Ç—Ä–µ—á—É –∏ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç–µ—Å—å –æ –∑–≤–æ–Ω–∫–µ –∏–ª–∏ –ª–∏—á–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ
3) –ó–Ω–∞–∫–æ–º–∏—Ç–µ—Å—å –∏ –æ–±–º–µ–Ω–∏–≤–∞–µ—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º!

–ù–∞—á–Ω–µ–º?
        """,
        reply_markup=keyboard,
    )
    await AirtableAPI.create_user(
        tg_id=message.from_user.id, username=message.from_user.username
    )
    await RegisterSteps.go.set()


async def cmd_text_go(message: types.Message, state: FSMContext):
    await AirtableAPI.update_user(message.from_user.id, state=UserState.go)
    await message.answer(
        "–°—É–ø–µ—Ä! –†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –≥–ª—É–ø–æ–≥–æ –º–æ–ª—á–∞–Ω–∏—è –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ.\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    await RegisterSteps.next()


async def stage_name(message: types.Message, state: FSMContext):
    await AirtableAPI.update_user(
        message.from_user.id, state=UserState.name, name=message.text
    )
    await message.reply(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {message.text}!")
    keyboard = types.ReplyKeyboardMarkup()
    buttons = [
        types.KeyboardButton(text="–°—Ç—É–¥–µ–Ω—Ç"),
        types.KeyboardButton(text="–í—ã–ø—É—Å–∫–Ω–∏–∫"),
    ]
    keyboard.add(*buttons)
    await message.answer("–¢—ã —Å—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫?", reply_markup=keyboard)
    await RegisterSteps.next()


async def stage_graduate(message: types.Message, state: FSMContext):
    if message.text == "–°—Ç—É–¥–µ–Ω—Ç":
        await AirtableAPI.update_user(
            message.from_user.id, state=UserState.is_graduate, is_graduate=False
        )
        await message.answer(
            "–ö—Ä—É—Ç–æ üòé\n\n–ì–¥–µ —Ç—ã —É—á–∏—à—å—Å—è? –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –∏–∑ —Ç–≤–æ–µ–≥–æ –≤—É–∑–∞.",
            reply_markup=types.ReplyKeyboardRemove(),
        )
    elif message.text == "–í—ã–ø—É—Å–∫–Ω–∏–∫":
        await AirtableAPI.update_user(
            message.from_user.id, state=UserState.is_graduate, is_graduate=True
        )
        await message.answer(
            "–ö—Ä—É—Ç–æ üòé\n\n–í—ã–ø—É—Å–∫–Ω–∏–∫–æ–º –∫–∞–∫–æ–≥–æ –≤—É–∑–∞ —Ç—ã —è–≤–ª—è–µ—à—å—Å—è? –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –∏–∑ —Ç–≤–æ–µ–≥–æ –≤—É–∑–∞.",
            reply_markup=types.ReplyKeyboardRemove(),
        )
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —è–≤–ª—è–µ—à—å—Å—è –ª–∏ —Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–º –∏–ª–∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–º."
        )
        return
    await RegisterSteps.next()


async def stage_university(message: types.Message, state: FSMContext):
    await AirtableAPI.update_user(
        message.from_user.id, state=UserState.university, university=message.text
    )
    user = await AirtableAPI.get_user(message.from_user.id)
    is_graduate = user["records"][0]["fields"].get("is_graduate")
    if is_graduate:
        await message.answer("–í –∫–∞–∫–æ–º –≥–æ–¥—É —Ç—ã –≤—ã–ø—É—Å—Ç–∏–ª—Å—è(-–∞—Å—å)?")
    else:
        await message.answer("–í –∫–∞–∫–æ–º –≥–æ–¥—É —Ç—ã –≤—ã–ø—É—Å–∫–∞–µ—à—å—Å—è?")
    await RegisterSteps.next()


async def stage_grad_year(message: types.Message, state: FSMContext):
    try:
        int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞")
    else:
        await AirtableAPI.update_user(
            message.from_user.id, state=UserState.grad_year, grad_year=int(message.text)
        )
        keyboard = types.ReplyKeyboardMarkup()
        buttons = [
            types.KeyboardButton(text="1 —Ä–∞–∑ (–ë–µ—Å–ø–ª–∞—Ç–Ω–æ)"),
            types.KeyboardButton(text="3 —Ä–∞–∑–∞ (100 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü)"),
        ]
        keyboard.add(*buttons)
        await message.answer(
            "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å üôÇ\n\n–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é —Ç–µ–±–µ –∏—Å–∫–∞—Ç—å –ø–∞—Ä—É –¥–ª—è –æ–±—â–µ–Ω–∏—è?",
            reply_markup=keyboard,
        )
        await RegisterSteps.next()


async def stage_payment(message: types.Message, state: FSMContext):
    if message.text == "1 —Ä–∞–∑ (–ë–µ—Å–ø–ª–∞—Ç–Ω–æ)":
        await AirtableAPI.update_user(
            message.from_user.id,
            state=UserState.payment,
            frequency=1,
            frequency_updated=str(datetime.utcnow()),
        )
        keyboard = types.ReplyKeyboardMarkup()
        buttons = [
            types.KeyboardButton(text="–í—Å–µ –ø–æ–Ω—è—Ç–Ω–æ!"),
        ]
        keyboard.add(*buttons)
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—à—å —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å—Ç—Ä–µ—á —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /payment",
            reply_markup=keyboard,
        )
    elif message.text == "3 —Ä–∞–∑–∞ (100 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü)":
        await AirtableAPI.update_user(
            message.from_user.id,
            state=UserState.payment,
            frequency=1,
            frequency_updated=str(datetime.utcnow()),
            payment_pending=True,
        )
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ! –¢–∞–∫ —Ç—ã —Å–º–æ–∂–µ—à—å –±—ã—Å—Ç—Ä–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–µ—Ç—å –ø–æ–ª–µ–∑–Ω—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º. –û–ø–ª–∞—Ç–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ —Ç—ã –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω —Å —ç—Ç–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏.",
            reply_markup=types.ReplyKeyboardRemove(),
        )
        await message.answer("https://disk.yandex.ru/i/8tLxmWvFp28-Bg")
        await asyncio.sleep(10)
        keyboard = types.ReplyKeyboardMarkup()
        buttons = [
            types.KeyboardButton(text="–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ ‚úÖ"),
        ]
        keyboard.add(*buttons)
        await message.answer(
            "–û–ø–ª–∞—Ç—É –º–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ ‚Äî https://yoomoney.ru/to/410019123578551\n\n–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ —Å–≤–æ–π username.",
            reply_markup=keyboard,
        )
    await RegisterSteps.next()


async def stage_active(message: types.Message, state: FSMContext):
    if message.text == "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ ‚úÖ":
        await message.answer(
            "–ú—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫, —Å –Ω–æ–≤–æ–π –Ω–µ–¥–µ–ª–∏ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Ç—Ä–∏ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞!",
            reply_markup=types.ReplyKeyboardRemove(),
        )
    elif message.text == "–í—Å–µ –ø–æ–Ω—è—Ç–Ω–æ!":
        await message.answer("–°—É–ø–µ—Ä!", reply_markup=types.ReplyKeyboardRemove())
    await AirtableAPI.update_user(message.from_user.id, state=UserState.active)
    await message.answer("–ó–∞–ø–∏—Å–∞–ª —Ç–µ–±—è. –í –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ø—Ä–∏—à–ª—é –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á!")
    await message.answer(
        "–¢—ã —Å–º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /settings. –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /contact.\n\n–ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —Ç—ã –Ω–∞–π–¥–µ—à—å –æ—Ç–ª–∏—á–Ω—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ MeetPeer!"
    )
    await state.finish()
